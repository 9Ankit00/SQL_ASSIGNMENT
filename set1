create database set1;
use set1;

create table CITY(
    id int,
    name varchar(17),
    countrycode varchar(3),
    district varchar(20),
    population int
);


Insert into CITY values(6,'Rotterdam' ,'NLD' ,'Zuid-Holland', 593321)
,(3878, 'Scottsdale' ,'USA', 'Arizona', 202705)
,(3965, 'Corona', 'USA', 'California', 124966)
,(3973, 'Concord', 'USA', 'California', 121780)
,(3977, 'Cedar Rapids' ,'USA' ,'Iowa' ,'120758')
,(3982, 'Coral Springs', 'USA', 'Florida', 117549)
,(4054, 'Fairfield', 'USA', 'California', 92256)
,(4058, 'Boulder', 'USA' ,'Colorado', 91238)
,(4061, 'Fall River', 'USA','Massachusetts', 90555);


select * from CITY;

Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.
The CountryCode for America is USA.
The CITY table is described as follows:

--Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.The CountryCode for America is USA.
select * from CITY where COUNTRYCODE ='USA' and population>100000; 




--Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.
select name from CITY where COUNTRYCODE ='USA' and population>120000; 

--Q3. Query all columns (attributes) for every row in the CITY table.
select * from CITY;

--Q4. Query all columns for a city in CITY with the ID 1661.
select * from CITY where id =1661;

--Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
select * from CITY where COUNTRYCODE ='JPN';

--Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
select name from CITY where COUNTRYCODE ='JPN';


create table STATION (
id int,
city varchar(21),
state varchar(2),
lat_n int,
long_w int
);

Insert into STATION values
(794,'Kissee Mills','MO',139,73),
(824,'Loma Mar','CA',48,130),
(603,'Sandy Hook','CT',72,148),
(478,'Tipton','IN',33,97),
(619,'Arlington','CO',75,92),
(711,'Turner','AR',50,101),
(839,'Slidell','LA',85,151),
(411,'Negreet','LA',98,105),
(588,'Glencoe','KY',46,136),
(665,'Chelsea','IA',98,59),
(342,'Chignik Lagoon','AK',103,153),
(733,'Pelahatchie','MS',38,28),
(441,'Hanna City','IL',50,136),
(811,'Dorrance','KS',102,121),
(698,'Albany','CA',49,80),
(325,'Monument','KS',70,141),
(414,'Manchester','MD',73,37),
(113,'Prescott','IA',39,65),
(971,'Graettinger','IA',94,150),
(266,'Cahone','CO',116,127)
;
select *  from STATION;
--Q7. Query a list of CITY and STATE from the STATION table.
select city,state from STATION;

--Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
select city from STATION where id%2=0;

--Q9. Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
select count(city) -count(distinct city) from STATION;

--Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths 
--(i.e.: number of characters in the name). If there is more than one smallest or largest city, 
--choose the one that comes first when ordered alphabetically.

--shortest
select CITY,length(city) as Length from STATION order by length(city) ,city limit 1;

--longest
select CITY,length(city) as Length from STATION order by length(city) desc,city limit 1;


--Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
select distinct CITY from STATION where city Rlike '^[AEIOUaeiou].*$';

--Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
select distinct CITY from STATION where city Rlike '^*.[AEIOUaeiou]$';
--Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
select distinct CITY from STATION where city not Rlike '^[AEIOUaeiou].*$';

--Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
select distinct CITY from STATION where city not Rlike '^*.[AEIOUaeiou]$';

--Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
--with vowels. Your result cannot contain duplicates

select distinct CITY from STATION where city not Rlike '^*.[AEIOUaeiou]$' or city not Rlike '^[AEIOUaeiou].*$' ;


--Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with
--vowels. Your result cannot contain duplicates.

select distinct CITY from STATION where city not Rlike '^*.[AEIOUaeiou]$' and city not Rlike '^[AEIOUaeiou].*$' ;



--17.
--Table Product & product_id as primary key
create table product(
    product_id int,
    product_name varchar(50),
    unit_price int,
     constraint pk_product_id PRIMARY KEY(product_id)
);



--Table Sales
create table sales(
    seller_id int,
    product_id int,
    buyer_id int,
    sale_date date,
    quantity int,
    price int ,
    constraint fk_product_id FOREIGN KEY(product_id)
    REFERENCES product(product_id)
);



insert INTO product values(1,'S8',1000),
                         (2,'G4',800),
                         (3,'iPhone',1400);

insert into sales values(1,1,1,'2019-01-21',2,2000);      
insert into sales values(1,2,2,'2019-02-17',1,800);  
insert into sales values(2,2,3,'2019-06-02',1,800);  
insert into sales values(3,3,4,'2019-05-13',2,2800);

--Write an SQL query that reports the products that were only 
--sold in the first quarter of 2019. That is,
--between 2019-01-01 and 2019-03-31 inclusive

select p.product_id,p.product_name from product p
      INNER JOIN sales s on
      p.product_id =s.product_id group by p.product_id
      having min(sale_date) >='2019-01-01' and max(sale_date) <='2019-03-31';


--18

create table views (
    article_id int,
    author_id int,  
    viewer_id int,   
    view_date date  

);

insert into views values(1, 3, 5 ,'2019-08-01'),
                        (1, 3, 6, '2019-08-02'),
                        (2, 7, 7, '2019-08-01'),
                        (2, 7, 6, '2019-08-02'),
                        (4, 7, 1, '2019-07-22'),
                        (3, 4, 4, '2019-07-21'),
                        (3, 4, 4, '2019-07-21');

--Write an SQL query to find all the authors that viewed at least one of their own articles
select distinct author_id from views where author_id =viewer_id;

--19
create table delivery(
    delivery_id int,  
    customer_id int,   
    order_date date,     
    customer_pref_delivery_date date   ,
    constraint pk_delivery PRIMARY KEY(delivery_id)
);


insert into delivery values 
(1 ,1 ,'2019-08-01', '2019-08-02'),
(2 ,5 ,'2019-08-02', '2019-08-02'),
(3 ,1 ,'2019-08-11', '2019-08-11'),
(4 ,3 ,'2019-08-24', '2019-08-26'),
(5 ,4 ,'2019-08-21', '2019-08-22'),
(6 ,2 ,'2019-08-11', '2019-08-13');



--**when we call case statement when there is need of additional cols 
--sum 0's, 1's case
select  round(
              100*SUM(CASE when
                           order_date = customer_pref_delivery_date 
                           then 1 
                           else 0
                           END)      
              /count(*),2) as immediate_percentage
        from delivery;      

--20


create table ads (
    ad_id int,
    user_id int,
    action ENUM ('Clicked', 'Viewed', 'Ignored') ,
    constraint pk_ads PRIMARY KEY(ad_id,user_id)
);

insert into ads values (1,1,'Clicked')
,(2,2,'Clicked')
,(3,3,'Viewed')
,(5,5,'Ignored')
,(1,7,'Ignored')
,(2,7,'Viewed')
,(3,5,'Clicked')
,(1,4,'Viewed')
,(2,11,'Viewed')
,(1,2,'Clicked');
truncate table ads;



select ad.ad_id ,round(CASE when ad.total_clicks+ad.total_views =0 then 0
                      else 100*ad.total_clicks/(ad.total_clicks+ad.total_views) 
                      END,2) as ctr
       from               
  
      (select ad_id,
              sum(CASE when action='Clicked' then 1 else 0 END) as total_clicks,
              sum(CASE when action='Viewed' then 1 else 0 END) as total_views
              from ads group by ad_id) as ad order by ctr desc;
			  
			  
--21
create table employee(
    employee_id int,
    team_id int,
    constraint pk_employee PRIMARY KEY(employee_id)
);


insert into employee value(1,8),
                          (2,8),
                          (3,8),
                          (4,7),
                          (5,9),
                          (6,9);
						 
select employee_id , 
       count(*) over(partition by team_id) as team_size
    from employee order by team_size desc;				  
			  


--22.
create table countries(
    country_id int,
    country_name varchar(50) ,
    constraint pk_countries PRIMARY KEY(country_id)
);

create table weather(
    country_id int,
    weather_state int,
    day date,
    constraint pk_weather PRIMARY KEY(country_id,day)

);
insert into countries values(2,'USA'),
                            (3,'Australia'),
                            (7,'Peru'),
                            (5,'China'),
                            (8,'Morocco'),
                             (9,'Spain');
insert into weather values
                  (2,15,'2019-11-01'),
                  (2,12,'2019-10-28'),
                  (2,12,'2019-10-27'),
                  (3,-2,'2019-11-10'),
                  (3,0,'2019-11-11'),
                  (3,3,'2019-11-12'),
                  (5,16,'2019-11-07'),
                  (5,18,'2019-11-09'),
                  (5,21,'2019-11-23'),
                  (7,25,'2019-11-28'),
                  (7,22,'2019-12-01'),
                  (7,20,'2019-12-02'),
                  (8,25,'2019-11-05'),
                  (8,27,'2019-11-15'),
                  (8,31,'2019-11-25'),
                  (9,7,'2019-10-23'),
                  (9,3,'2019-12-23');





select c.country_name ,
        CASE when avg(nw.weather_state) <=15 then 'Cold'
            when avg(nw.weather_state) >=25 then 'Hot'
            else 'Warm'
        END as weather_type   
    from countries c
                 inner join 
    (select country_id,
            weather_state 
            from weather 
         where year(day)=2019 and month(day)=11)  nw
                  
                  on c.country_id =nw.country_id
    group by nw.country_id;     			  
			  





--23.

create table prices(
             product_id int,
             start_date date,
             end_date date,
             price int,
             constraint pk_prices PRIMARY KEY(product_id, start_date, end_date)

);



create table unitssold(
             product_id int,
             purchase_date date,  
             units int
);


insert into prices values (1, '2019-02-17', '2019-02-28', 5),
                          (1, '2019-03-01', '2019-03-22' ,20),
                          (2, '2019-02-01', '2019-02-20' ,15),
                          (2, '2019-02-21' ,'2019-03-31', 30);

insert into unitssold values (1, '2019-02-25' ,100),
                             (1, '2019-03-01' ,15),
                             (2, '2019-02-10' ,200),
                             (2, '2019-03-22' ,30);

select p.product_id, 
       round( sum(u.units*p.price) /
              sum(u.units),2)
    from prices p                     
                inner join 
    unitssold u  
    on u.purchase_date BETWEEN  p.start_date and p.end_date 
    and p.product_id =u.product_id
    group by p.product_id
       ;      
                     
					 
--24
create table activity(
             player_id int,
             device_id int,
             event_date date,
             games_played int,
             constraint pk_activity PRIMARY KEY (player_id, event_date)
);




insert into activity values(1,2,'2016-03-01',5),
                            (1,2,'2016-05-02',6),
                            (2,3,'2017-06-25',1),
                            (3,1,'2016-03-02',0),
                            (3,4,'2018-07-03',5);


SELECT player_id ,min(event_date) from
     activity group by player_id
     ;                            
	 
--25


SELECT distinct player_id,
       first_value(device_id) over(partition by player_id order by event_date)
       from activity
     ;     
	 
	 
	 

--26
create table products
(product_id int,
product_name varchar(50),
product_category varchar(50),
constraint pk_products PRIMARY KEY(product_id)
);

create table orders(
product_id int,
order_date date,
unit int

);

insert into products values
(1 ,'Leetcode Solutions', 'Book'),
(2 ,'Jewels of Stringology', 'Book'),
(3 ,'HP', 'Laptop'),
(4 ,'Lenovo', 'Laptop'),
(5 ,'Leetcode Kit', 'T-shirt');


insert into orders values(1,'2020-02-05',60)
,(1,'2020-02-10',70)
,(2,'2020-01-18',30)
,(2,'2020-02-11',80)
,(3,'2020-02-17',2)
,(3,'2020-02-24',3)
,(4,'2020-03-01',20)
,(4,'2020-03-04',30)
,(4,'2020-03-04',60)
,(5,'2020-02-25',50)
,(5,'2020-02-27',50)
,(5,'2020-03-01',50)
;

select p.product_name,sum(o.unit) from products p 
                       join  
              orders o on p.product_id =o.product_id and order_date like '2020-02%'
              group by p.product_id having sum(o.unit)>=100 ; 



			 
					 






